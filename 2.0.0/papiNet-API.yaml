openapi: 3.0.3
info:
  title: papiNet API
  description: papinet API is a global initiative for the Forst and Paper supply chain.
  contact:
    name: papiNet API CWG
    url: https://github.com/papinet/papiNet-API/issues
  license:
    name: Apache 2.0
    url: https://github.com/papinet/papiNet-API/blob/master/LICENSE
  version: 2.0.0
servers:
  - url: http://localhost:3020
    description: papiNet Mock Server
paths:

   ## MASTER DATA (6)

  '/customer-articles':
    # GET /customer-articles
    # None => ListOfCustomerArticles
    get:
      summary: List `customer-articles`
      description: Gets a paginated list of all `customer-articles` defined by the `customer`.
      parameters:
        - in: query
          name: status
          description: Filter by status
          required: false
          schema:
            type: string
            enum:
              - Active
              - Inactive
        - in: query
          name: productType
          description: Filter by productType
          required: false
          schema:
            type: string
            enum:
              - Paper
        - in: query
          name: customerArticleNumber
          description: Filter by customerArticleNumber
          required: false
          schema:
            type: string
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfCustomerArticles'
        '204':
          description: No Content

  '/customer-articles/{customerArticleId}':
    # GET /customer-articles/{customerArticleId}
    # None => GetCustomerArticleById
    get:
      summary: Get a `customer-article`
      description: Gets the details of a specific `customer-article`.
      parameters:
        - in: path
          name: customerArticleId
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the `customer-article` to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomerArticleById'
        '404':
          description: Not Found

  '/locations':
    # GET /locations
    # None => ListOfLocations
    get:
      summary: List `locations`
      description: Gets a paginated list of all `locations`.
      parameters:
        - in: query
          name: status
          description: Filter by status
          required: false
          schema:
            type: string
            enum:
              - Active
              - Inactive
        - in: query
          name: countryCode
          description: Filter by countryCode
          required: false
          schema:
            type: string
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfLocations'
        '204':
          description: No Content

  '/locations/{locationId}':
    # GET /locations/{locationId}
    # None => GetLocationById
    get:
      summary: Get a `location`
      description: Gets the details of a specific `location`.
      parameters:
        - in: path
          name: locationId
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the `location` to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLocationById'
        '404':
          description: Not Found

  '/parties':
    # GET /parties
    # None => ListOfParties
    get:
      summary: List `parties`
      description: Gets a paginated list of all `parties`.
      parameters:
        - in: query
          name: status
          description: Filter by status
          required: false
          schema:
            type: string
            enum:
              - Active
              - Inactive
        - in: query
          name: countryCode
          description: Filter by countryCode
          required: false
          schema:
            type: string
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfParties'
        '204':
          description: No Content

  '/parties/{partyId}':
    # GET /parties/{partyId}
    # None => GetPartyById
    get:
      summary: Get a `party`
      description: Gets the details of a specific `party`.
      parameters:
        - in: path
          name: partyId
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the `party` to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPartyById'
        '404':
          description: Not Found

  ## PURCHASE ORDER (3)

  '/purchase-orders':
    # POST /purchase-orders
    # CreatePurchaseOrder => GetPurchaseOrderById
    post:
      summary: Create a `purchase-order`
      description: Creates a `purchase-order`.
      requestBody:
        description: The definition of the `purchase-order` to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePurchaseOrder'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPurchaseOrderById'

  '/purchase-orders/{purchaseOrderId}':
    # GET /purchase-orders/{purchaseOrderId}
    # None  => GetPurchaseOrderById
    get:
      summary: Get a `purchase-order`
      description: Gets the details of a specific `purchase-order`.
      parameters:
        - in: path
          name: purchaseOrderId
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the `purchase-order` to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPurchaseOrderById'

    # PATCH /purchase-orders/{purchaseOrderId}
    # ModifyPurchaseOrder => GetPurchaseOrderById
    patch:
      summary: Modify a `purchase-order`
      description: Modifies a specific `purchase-order`.
      parameters:
        - in: path
          name: purchaseOrderId
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the `purchase-order` to modify
      requestBody:
        description: The definition of the `purchase-order` to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyPurchaseOrder'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPurchaseOrderById'

components:
  schemas:

    PaginationLinks:
      type: object
      # none of the properties are required.
      properties:
        first:
          type: object
          required:
            - href
          properties:
            href:
              type: string
              format: uri-reference
        prev:
          type: object
          required:
            - href
          properties:
            href:
              type: string
              format: uri-reference
        next:
          type: object
          required:
            - href
          properties:
            href:
              type: string
              format: uri-reference
        last:
          type: object
          required:
            - href
          properties:
            href:
              type: string
              format: uri-reference

    CoordinatesWGS84:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
        longitude:
          type: number

    ListOfCustomerArticles:
      type: object
      required:
        - numberOfCustomerArticles
        - customerArticles
      properties:
        numberOfCustomerArticles:
          type: integer
          minimum: 0
        customerArticles:
          type: array
          minItems: 0
          items:
            type: object
            required:
              - id
              - customerArticleTimestamp
              - status
              - sellerProductBrandName
              - sellerProductName
              - customerArticleNumber
              - productType
            properties:
              id:
                type: string
              customerArticleTimestamp:
                type: string
                format: date-time # UTC MUST be used!
              status:
                type: string
                enum:
                  - Active
                  - Inactive
              sellerProductBrandName:
                type: string
              sellerProductName:
                type: string
              customerArticleNumber:
                type: string
              productType:
                type: string
                enum:
                  - Paper
                  - Pulp 

        links:
          $ref: '#/components/schemas/PaginationLinks'

    GetCustomerArticleById:
      type: object
      required:
        - id
        - customerArticleTimestamp
      properties:
        id:
          type: string
        customerArticleTimestamp:
          type: string
          format: date-time # UTC MUST be used!

    ListOfLocations:
      type: object
      required:
        - numberOfLocations
        - locations
      properties:
        numberOfLocations:
          type: integer
          minimum: 0
        locations:
          type: array
          minItems: 0
          items:
            type: object
            required:
              - id
              - locationTimestamp
              - status
              - locationIdentifier
              - nameLines
              - countryCode
            properties:
              id:
                type: string
              locationTimestamp:
                type: string
                format: date-time # UTC MUST be used!
              status:
                type: string
                enum:
                  - Active
                  - Inactive
              locationIdentifier:
                type: string
              nameLines:
                type: array
                minItems: 1
                items:
                  type: string
              countryCode:
                type: string
                minLength: 2
                maxLength: 2
                description: The (two-letter) value - e.g. "BE", "SE", ... - MUST exist in the ISO 3166-1 alpha-2 standard list.
        links:
          $ref: '#/components/schemas/PaginationLinks'

    GetLocationById:
      type: object
      required:
        - id
        - locationTimestamp
        - status
        - locationIdentifier
        - nameLines
        - address # as only the country is required within it
        # coordinatesWGS84 is not required
      properties:
        id:
          type: string
        locationTimestamp:
          type: string
          format: date-time # UTC MUST be used!
        status:
          type: string
          enum:
            - Active
            - Inactive
        locationIdentifier:
          type: string
        nameLines:
          type: array
          minItems: 1
          items:
            type: string
        address:
          type: object
          required:
            # addressLines is not required
            # city is not required
            # postalCode is not required
            - countryCode
          properties:
            addressLines:
              type: array
              minItems: 1
              items:
                type: string
            city:
              type: string
            postalCode:
              type: string
            countryCode:
                type: string
                minLength: 2
                maxLength: 2
                description: The (two-letter) value - e.g. "BE", "SE", ... - MUST exist in the ISO 3166-1 alpha-2 standard list.
        coordinatesWGS84:
          $ref: '#/components/schemas/CoordinatesWGS84'

    ListOfParties:
      type: object
      required:
        - numberOfParties
        - parties
      properties:
        numberOfParties:
          type: integer
          minimum: 0
        parties:
          type: array
          minItems: 0
          items:
            type: object
            required:
              - id
              - partyTimestamp
              - status
              - partyIdentifier
              - nameLines
              - countryCode
            properties:
              id:
                type: string
              partyTimestamp:
                type: string
                format: date-time # UTC MUST be used!
              status:
                type: string
                enum:
                  - Active
                  - Inactive
              partyIdentifier:
                type: string
              nameLines:
                type: array
                minItems: 1
                items:
                  type: string
              countryCode:
                type: string
                minLength: 2
                maxLength: 2
                description: The (two-letter) value - e.g. "BE", "SE", ... - MUST exist in the ISO 3166-1 alpha-2 standard list.
        links:
          $ref: '#/components/schemas/PaginationLinks'

    GetPartyById:
      type: object
      required:
        - id
        - partyTimestamp
        - status
        - partyIdentifier
        - nameLines
        - address # as only the country is required within it
      properties:
        id:
          type: string
        partyTimestamp:
          type: string
          format: date-time # UTC MUST be used!
        status:
          type: string
          enum:
            - Active
            - Inactive
        partyIdentifier:
          type: string
        nameLines:
          type: array
          minItems: 1
          items:
            type: string
        address:
          type: object
          required:
            # addressLines is not required
            # city is not required
            # postalCode is not required
            - countryCode
          properties:
            addressLines:
              type: array
              minItems: 1
              items:
                type: string
            city:
              type: string
            postalCode:
              type: string
            countryCode:
                type: string
                minLength: 2
                maxLength: 2
                description: The (two-letter) value - e.g. "BE", "SE", ... - MUST exist in the ISO 3166-1 alpha-2 standard list.

    CreatePurchaseOrder: {}

    GetPurchaseOrderById:
      type: object
      required:
        - id
        - purchaseOrderTimestamp
      properties:
        id:
          type: string
        purchaseOrderTimestamp:
          type: string
          format: date-time # UTC MUST be used!

    ModifyPurchaseOrder: {}
